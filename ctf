#! /usr/bin/env python3
# -*- encoding: utf-8 -*-
import sys
import argparse
import pysodium
import traceback

from nizkctf.cli import news
from nizkctf.repo import contents, trail
from nizkctf.challenge import Challenge, derive_keypair, random_salt


def ensure_unicode_locale():
    if sys.stdout.encoding != 'utf-8':
        print('\033[1mWARNING\033[00m: This CTF accepts '
              'international characters in team names and\nproblem '
              'descriptions. You are currently not using a Unicode '
              'locale,\ntherefore you may experience random '
              'UnicodeEncodeError exceptions.\n\nPlease fix by '
              'changing to a Unicode locale, e.g.\n\n'
              '  export LC_ALL=en_US.UTF-8\n\n\n',
              file=sys.stderr)

def cmd_init(args):
    print('Cloning Git repositories', file=sys.stderr)
    contents.clone()
    trail.clone()
    print('We are all set!', file=sys.stderr)


def cmd_add_challenge(args):
    id = input('Challenge id (digits, letters, underscore): ').strip()
    title = input('Title: ').strip()
    tags = input('Tags (separate tags with space): ').strip().split()
    salt = random_salt()
    while True:
        level = input('Pwhash level (interactive, moderate, sensitive): ').strip().upper()
        try:
            opslimit = getattr(pysodium, 'crypto_pwhash_argon2id_OPSLIMIT_'+level)
            memlimit = getattr(pysodium, 'crypto_pwhash_argon2id_MEMLIMIT_'+level)
            break
        except:
            traceback.print_exc()
    flag = input('Flag: ').strip()

    pk, _ = derive_keypair(salt, opslimit, memlimit, flag)
    chall = Challenge(id=id)
    chall['id'] = id
    chall['title'] = title
    chall['tags'] = tags
    chall['salt'] = salt
    chall['opslimit'] = opslimit
    chall['memlimit'] = memlimit
    chall['pk'] = pk
    chall.save()


def cmd_add_news(args):
    news.submit(args.msg)


def main():
    ensure_unicode_locale()

    commands = {
        'init': cmd_init,
        'add_chall': cmd_add_challenge,
        'add_news': cmd_add_news,
    }

    parser = argparse.ArgumentParser(description='NIZKCTF admin toolkit')
    subparsers = parser.add_subparsers(help='command help',
                                       metavar='{init,add_chall,add_news}')

    parser_init = subparsers.add_parser('init', help='init ctf environment')
    parser_init.set_defaults(command='init')

    parser_add_challenge = subparsers.add_parser('add_chall', help='add challenge')
    parser_add_challenge.set_defaults(command='add_chall')

    parser_add_news = subparsers.add_parser('add_news', help='add news')
    parser_add_news.set_defaults(command='add_news')
    parser_add_news.add_argument('--msg', required=True,
                                 help='msg to be added')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)
    args = parser.parse_args()
    commands[args.command](args)


if __name__ == '__main__':
    main()
